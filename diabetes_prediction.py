# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Z00Xjfxh_7LMcStPVdPo23nB5J4JSQU
"""

import pandas as pd
df = pd.read_csv("/content/diabetes_data_upload.csv")
df. dropna ( axis = 0 , inplace = True )
print(df)
print(df.isnull())

df = df.replace("Yes", 1)

df = df.replace("No",0)

df

df.info()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
# %matplotlib inline
import numpy as np

sns.countplot(df['class'],)

sns.distplot(df['Age'])

df = df.drop('Gender', axis=1)
df = df.replace("Positive", 1)
df = df.replace("Negative", 0)
X = df.drop('class', axis=1)
y = df['class']
X_train,X_test,y_train,y_test = train_test_split(X,y)

X_train.head()

y_train.head()

"""Keras is an open source neural network library written in Python.

**There are two ways to build Keras models:**
**sequential API**,
**functional API**
"""

from keras.models import Sequential
from keras.layers import Dense, Dropout

"""
**The model design:**


*   4 layers.
*   27 total neurons
*   Relu & Sigmoid activation functions.

[link text](https://keras.io/api/models/)




.

"""

model = Sequential()

model.add(Dense(15, input_dim=15, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(3, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss="mse", optimizer="adam", metrics=['accuracy'])

model.summary()

history = model.fit(X_train, y_train, epochs = 2500, batch_size=15, validation_data=(X_test, y_test))

"""Saving the model
Keras also supports a simpler interface to save both the model weights and model architecture together into a single H5 file.

Saving the model in this way includes everything we need to know about the model, including:

Model weights.
Model architecture.
Model compilation details (loss and metrics).
Model optimizer state.
This means that we can load and use the model directly, without having to re-compile it.
"""

model.save('model.h5')

from keras.models import load_model
model = load_model('model.h5')
model.summary()

print(model.predict(np.array([53,0,1,0,1,0,1,0,0,0,1,0,0,1,1]).reshape((1,15))))

_, accuracy = model.evaluate(X_train, y_train)
print('Accuracy: %.2f' % (accuracy*100))

import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()